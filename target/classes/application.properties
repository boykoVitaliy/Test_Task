
## PostgreSQL
##spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
##spring.datasource.username=root
##spring.datasource.password=root

##MySQL
database=mysql
spring.datasource.url=${MYSQL_URL:jdbc:mysql://localhost:3306/final_db?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC}
spring.datasource.username=${MYSQL_USER:boyko}
spring.datasource.password=${MYSQL_PASS:password}
# SQL is written to be idempotent so this is safe
spring.datasource.initialization-mode=always

spring.datasource.schema=classpath*:db/${database}/schema.sql
spring.datasource.data=classpath*:db/${database}/data.sql

#------------------

#server.port=8080
##spring.datasource.url=${MYSQL_URL:jdbc:mysql://localhost/final_db?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false}
#
#spring.datasource.url=jdbc:mysql://dockermysql:3306/final_db?allowPublicKeyRetrieval=true&useSSL=false
#spring.datasource.username=boyko
#spring.datasource.password=password
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.show-sql=true

  #drop n create table again, good for testing, comment this in production

#spring.jpa.hibernate.ddl-auto=validate
#spring.jpa.hibernate.ddl-auto=create
#server.port=8080

#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.database-platform =org.hibernate.dialect.PostgreSQL9Dialect
#

#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#spring.jpa.database-platform = org.hibernate.dialect.MySQL5Dialect

